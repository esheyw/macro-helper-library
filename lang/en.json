{
  "MHL": {
    "Count": "Count",
    "Current": "Current",
    "Confirm": "Confirm",
    "CurrentValue": "Current Value",
    "DefaultValue": "Default Value",
    "Group": "Group",
    "Module": "Module",
    "HasDefault": "Has Default",
    "IsDefault": "Is Default",
    "NotApplicable": "N/A",
    "SetTo": "Set To",
    "Visible": "Visible",
    "Grammar": {
      "Articles": {
        "An": "an",
        "A": "a",
        "The": "the"
      }
    },
    "IconFontsHandler": {
      "Fallback": {
        "Sort": "Sort value not supplied or already exists for font {name}, falling back to highest sort + 5."
      },
      "Error": {
        "PlainObject": "Icon font entries must be plain objects with name, prefix, and list keys",
        "UniqueNameRequired": "Icon font entries must provide a name key that is not already in use.",
        "UniquePrefixRequired": "Icon font entries must provide a prefix key, or array of keys, none of which are already in use.",
        "NonEmptyListRequired": "Icon font entries must provide a list key that is a non-empty array of strings.",
        "SortInteger": "The sort property, if provided in an icon font entry, must be an integer.",
        "ValidatorFunction": "Icon font entries must provide a validator function that can accept a string, or an array of strings, or a series of strings, and validate that at least one argument is a valid icon of your list, returning a string containing all the css classes required to make that icon valid, or empty string on failure."
      }
    },
    "PickAThing": {
      "Title": "Pick A Thing",
      "Error": {
        "ThingsFormat": "`things` must be an array of \\{name: string, value: any, img?: string, identifier?: string} objects.",
        "MalformedThing": "Provided thing lacked valid label or value."
      }
    },
    "SettingsManager": {
      "Reset": {
        "Setting": {
          "SavedTooltip": "This setting differs from its default value. Left click to reset it.",
          "FormTooltipAppend": "<br>This setting's input currently differs from its saved value. Right click to reset it.",
          "FormTooltipSolo": "This setting's input currently differs from its saved value. Left or right click to reset it.",
          "IsDefaultTooltip": "This setting is currently default.",
          "DialogHeader": "Reset {target}?"
        },
        "Group": {
          "SavedTooltip": "This group has {count} setting(s) that aren't default. Left click to reset them.",
          "FormTooltipAppend": "<br>{count} setting input(s) currently differ from their saved values. Right click to reset them.",
          "FormTooltipSolo": "{count} of this group's setting input(s) currently differ from their saved values. Left or right click to reset them.",
          "AllDefaultTooltip": "This group's settings' saved values are all currently default.",
          "DialogHeader": "Reset all settings of group {target}?"
        },
        "Module": {
          "SavedTooltip": "This module has {count} setting(s) that aren't default. Left click to reset them.",
          "FormTooltipAppend": "<br>{count} setting input(s) currently differ from their saved values. Right click to reset them.",
          "FormTooltipSolo": "{count} of this module's setting input(s) currently differ from their saved values. Left or right click to reset them.",
          "AllDefaultTooltip": "This module's settings' saved values are all currently default.",
          "DialogHeader": "Reset all settings of module {target}?"
        },
        "FormResetBanner": "Resetting {count} form value(s) to their saved value(s).",
        "DialogTitle": "Reset to Default",
        "NotConfigurableTooltip": "This setting is not configurable from the settings application."
      },
      "ResetSingle": {
        "DialogHeader": "Reset {setting}?",
        "DialogBody": "Default value: <code>{value}</code><br><em>Note: This will apply immediately to the actual setting, not just the input in the settings window.</em>",
        "Tooltip": "Reset this setting to its default value",
        "IsDefault": "Setting is currently equal to its default value"
      },
      "ResetMultiple": {
        "AllModuleDefault": "This module's settings are all currently default",
        "AllGroupDefault": "This group's settings are all currently default",
        "ModuleTooltip": "Reset this module's settings to default",
        "GroupTooltip": "Reset this group's settings to default",
        "AllDefault": "All settings are currently equal to their default value",
        "Body": "This {type} has <span class=\"count-tooltip\" data-tooltip-direction=\"UP\" data-tooltip=\"{defaultlessTooltip}\">{defaultlessCount}</span> setting(s) without defaults, and <span class=\"count-tooltip\" data-tooltip-direction=\"UP\" data-tooltip=\"{areDefaultTooltip}\">{areDefault}</span> setting(s) that are unchanged from their default. This action will reset:",
        "Footer": "Note: This will apply immediately to the actual settings, not just the inputs in the settings window.",
        "DialogHeader": "Reset All {divisionName} Settings?"
      },
      "ColorPicker": {
        "ValidHexCode": "Must be a # followed by a valid 6-character hex color code"
      },
      "Error": {
        "BadModuleID": "moduleFor must be a string module ID or a Module object reference.",
        "ManagerAlreadyExists": "A settings manager has already been registered for {module}.",
        "InvalidGroup": "Group names must be strings, not whatever was logged. Skipping.",
        "DuplicateGroup": "Group \"{group}\" already declared. Skipping.",
        "InvalidEnrichHints": "The enrichHints option, if provided, must be a boolean (true meaning use only the default erichers), or in the form of either a Map or an Object with pattern keys and replacement values (for use with `String.replace()`), or an Array of such pairs. ",
        "InvalidGroupsOption": "The groups option passed was invalid, if provided it must be true, false, the string \"a\", or an array of group name strings. Defaulting to false.",
        "InvalidSortOption": "The sort option passed was invalid, if provided it must be the string \"a\", a boolean (true equating to \"a\") or a string comparison function. Defaulting to registration order",
        "InvalidResetButtons": "The resetButtons option, if provided, must be true,false, one of the strings \"all\", \"settings\", \"groups\", or \"module\", or an array of such strings. Defaulting to false.",
        "InvalidSettingKey": "{module} setting data contains key \"{key}\" which is not valid to register a setting with, skipping.",
        "DuplicateSettingKey": "Setting key \"{key}\" already seen for {module}, skipping duplicate",
        "InvalidSettingData": "Setting `{key}` for module {module} failed to validate and was not registered.",
        "NoValidSettings": "No valid settings could be retrieved from passed data for module {module}.",
        "Hooks": {
          "BadHook": "Hook data for setting {key} of {module} is malformed; Must be an object containing a string `hook` key.",
          "RequiresAction": "Hook {hook} for setting {key} of {module} requires an `action` key containing a function.",
          "TestFunction": "Hook data for setting {key} of {module} is malformed; `test`, if provided, must be a function."
        },
        "Visibility": {
          "UnknownDependency": "Setting {dependsOn} not found, so it cannot be predicated on for visibility for setting {key} of {module}.",
          "RequireDependsOn": "Visibility data for setting {key} of {module} is malformed: If provided as an object, must contain a `dependsOn` key containing a string setting ID or an array of such.",
          "RequireTest": "Visibility data for setting {key} of {module} is malformed: If provided as an object, must contain a function under the `test` key.",
          "BadFormat": "Visibility data for setting {key} must be either a string setting ID (with optional ! prefix) or an object containing such under the `dependsOn` key, with an optional `test` function key."
        },
        "DuplicateSetting": "Setting ID \"{key}\" already exists for {module}.",
        "Button": {
          "BadFormat": "Button data must be an object with at least an `action` property containing a function.",
          "Label": "A setting's `button` data must contain a `label` property, either string or null (for localization key inference).",
          "Action": "A button replacement action must be a function."
        },
        "NoDefault": "Setting {setting} of {module} does not have a default value recorded and cannot be reset.",
        "NotRegistered": "Setting {setting} is not registered for {module}.",

        
        
        "InvalidColorPicker": "A setting with `colorPicker: true` in its data must have a default value that is a valid 7-character hex code (e.g. #FFFFFF).",
        
        "NotAnElement": "The provided variable \"{variable}\" was not an HTMLElement."
      },
      "Warning": {}
    },
    "Dialog": {
      "Warning": {
        "FormLacksName": "Form with no `name` found, falling back on numeric key.",
        "RequiredFields": "This dialog requires one or more fields to be non-empty: {fields}"
      },
      "Error": {
        "TemplateFailure": "The template filepath or literal passed to MHLDialog failed to compile properly.",
        "FormRequiresName": "One or more of the forms provided lacks a `name` property.",
        "ReservedKeys": "The contentData object must not contain any of the following reserved keys: {keys}",
        "BadValidator": "The supplied validator must either be a function or an array of value names required to be non-empty."
      }
    },
    "Prompt": {
      "SetAllSelected": "Set All Selected",
      "SetIndividually": "Set Individually"
    },
    "Macro": {
      "DropHeldTorch": {
        "Error": {
          "ItemPilesDependency": "This macro requires the Item Piles module active in this world to function."
        }
      },
      "FascinatingPerformance": {
        "Error": {
          "MustHaveFeat": "Selected actor must have the Fascinating Performance feat.",
          "MinimumTrained": "Must be at least Trained in Performance to use, or even have taken, Fascinating Performance.",
          "SingleTargetOnly": "You are only Trained in performance, so are limited to a single target.",
          "FourTargetsOnly": "You are only Expert in performance, so are limited to 4 targets.",
          "TenTargetsOnly": "You are only Master in performance, so are limited to 10 targets."
        },
        "Warning": {
          "TargetImmune": "Target \"{name}\" is immune to being fascinated."
        }
      },
      "LashingCurrents": {
        "Info": {
          "Removing": "Removing Lashing Currents rules from \"{name}\"."
        },
        "Error": {
          "NoneSelected": "No weapon selected.",
          "NoExistingFound": "No old-style Lashing Currents weapon found on the actor of selected token \"{name}\"."
        }
      },
      "UpdateInitiativeStatistics": {
        "Error": {
          "NoValidTokens": "None of the selected tokens are PCs or NPCs that are neither minions nor eidolons."
        },
        "AllSharedSkills": "Skills shared by all selected actors: ",
        "DisabledTooltip": "Being overridden by the all selector above."
      }
    },
    "GetAllFromAllowedPacks": {
      "Error": {
        "FieldsFormat": "`fields` must be an array of only strings."
      }
    },
    "PickItemFromActor": {
      "NoItemsOfType": "Selected actor lacks any items of type \"{itemType}\".",
      "FilterUnmatched": "Provided filter produced no valid items.",
      "NoMatchingHeld": "Selected actor is not holding any matching items."
    },
    "Error": {
      "UnsupportedDocument": "Document type {type} not supported by this function.",
      "Target": {
        "NotOneTargetted": "Must have exactly one token targetted.",
        "NotAnyTargetted": "Must have at least one token targetted."
      },
      "Token": {
        "Fallback": ", or a token of your assigned character on the current scene",
        "NotAnySelected": "Must have at least one token selected{fallback}.",
        "NotOneSelected": "Must not have more than one token selected."
      },
      "NotADocumentType": "Type {type} is not a valid type of Document.",
      "WrongDocumentTypeRetrieved": "Document retrieved was not of type {type}.",
      "TooEarlyForBanner": "Banner creation aborted because game isn't Ready, attempted type \"{type}\", string: \"{bannerstr}\"",
      "InvalidCamel": "I don't think {camel} is a real camel.",
      "RequiresSystem": "This macro/helper/class is only compatible with the <code>{system}</code> system.",
      "Generic": "You broke something.",
      "BannerType": "Banner type must be one of \"info\", \"warn\", or \"error\".",
      "LogType": "Log type must be one of \"debug\", \"info\", \"warn\", or \"error\".",
      "InvalidType": "Invalid type \"{type}\" provided.",
      "Validation": {
        "IconSchemaGlyphExact": "The glyph field of an icon font schema cannot define an exact `value`; use `choices` or `pattern`",
        "IconGeneric": "The provided arguments did not produce a valid icon string from any registered Icon font."
      },
      "DataModel": {
        "InitialFunctionFailure": "This model's `{field}` field's `initial` function threw an error, probably from being run too early."
      },
      "RequireSameInheritanceChain": "Both objects' classes must be from the same inheritance chain.",
      "BothMustBeClassesOrClassedObjects": "Both parameters must be classes or objects with a constructor.",
      "BothMustBeMaps": "At least one of original or other are not Maps or subclasses of Map.",
      "Type": {
        "Of": {
          "TraitSlugs": " of trait slug strings",
          "ButtonLabelStrings": " of button label strings"
        },
        "Array": "`{arg}` must be an Array{of}.",
        "User": "`{arg}` must be a User or the ID of one.",
        "Folder": "`{arg}` must be a Folder document or the ID of one.",
        "Function": "`{arg}` must be a Function.",
        "Number": "`{arg}` must be a Number.",
        "String": "`{arg}` must be a String.",
        "Boolean": "`{arg}` must be Boolean.",
        "DataModel": "`{arg}` must be a class inheriting from DataModel."
      }
    },
    "Warning": {
      "Fallback": {
        "FallbackIcon": "Provided arguments did not produce a valid set of icon classes, using fallback value {fallback}",
        "FallbackIconTooltip": "Using fallback icon. Parsed args: <p><code>{args}</code></p>",
        "BannerType": "Provided notification banner type \"{type}\" is not valid, defaulting to \"{defaultType}\".",
        "FirstTarget": "This operation requires a single target, using first target \"{name}\".",
        "FirstToken": "This operation requires a single selected token, using first token \"{name}\".",
        "LogType": "Provided log type \"{type}\" is not valid, defaulting to \"{defaultType}\".",
        "Type": "Expected parameter \"{arg}\" to be of type \"{expected}\", not \"{type}\". Casting.",
        "LevelOutOfBounds": "Provided level ({level}) out of bounds! Defaulting to level 25."
      },
      "SystemBelowVerified": "Your system version ({version}) is older than what Macro & Helper Library is verified for ({verified}). This may cause things to break, or might not; No guarantees."
    },
    "Setting": {
      "DebugMode": {
        "Name": "Debug Mode",
        "Hint": "Enable debug logging. Showstopper errors will fire without this, but fallback"
      },
      "ManagerDefaults": {
        "DisabledClass": {
          "Label": "Disabled Icon CSS Class",
          "Hint": "The CSS class applied to reset-to-default buttons when their associated setting(s) is/are default."
        },
        "AccordionIndicatorIcon": {
          "Label": "Accordion Indicator Icon",
          "Hint": "The css class(es) used to get the icon displayed next to a collapseable group header. Usually just the glyph-identifying class is sufficient, defaults will be filled in automatically."
        },
        "ModuleResetIcon": {
          "Label": "Module Reset Icon",
          "Hint": "Same as above, for the Reset Module Settings button's icon."
        },
        "GroupResetIcon": {
          "Label": "Group Reset Icon",
          "Hint": "Same as above, but for the Reset Group Settings button."
        },
        "SettingResetIcon": {
          "Label": "Setting Reset Icon",
          "Hint": "Same as above, but for the per-setting reset buttons."
        }
      },
      "ManagerDefaultsMenu": {
        "Name": "Icon Settings",
        "Hint": "Set the default FontAwesome glyphs for modules using the setting manager that haven't provided their own overrides.",
        "Label": "Icon Settings"
      },
      "DisabledClass": {
        "Name": "Disabled Reset Button Class",
        "Hint": "The CSS class applied to reset-to-default buttons that are currently disabled, if not overridden by a given module's MHLSettingsManager options. MHL ships with `disabled-transparent`, `disabled-blurry`, and `disabled-hidden`."
      },
      "LogLevel": {
        "Name": "Log Level for Debug Mode",
        "Hint": "The level at which `mhlog()`/`modLog()` calls will be made in debug mode if an explict type isn't passed.",
        "Choice": {
          "Debug": "Debug",
          "Info": "Info",
          "Warn": "Warning",
          "Error": "Error"
        }
      },
      "LegacyAccess": {
        "Name": "Legacy API Access",
        "Hint": "Populates `game.pf2emhl`, as is tradition. Available only after the Setup hook."
      },
      "GlobalAccess": {
        "Name": "Global API Access",
        "Hint": "Makes the MHL API accessible via just `mhl` in the global scope. Available only after the Setup hook."
      }
    },
    "SettingGroup": {
      "SettingsManager": "Setting Manager Defaults",
      "Testing": "Testing",
      "Access": "API Access",
      "ErrorHandling": "Error Handling"
    },
    "Fancy": "This is a {fancy} string!",
    "FancyInner": "{superlative} fancy",
    "Very": "Very"
  }
}
